C51 COMPILER V9.54   MAIN                                                                  02/28/2023 13:43:38 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Driver) DEBUG OBJECTEXTEND PRI
                    -NT(.\Listings\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          /* 头文件声明区 */
   2          #include <STC15F2K60S2.H>//单片机寄存器专用头文件
   3          #include <Init.h>//初始化底层驱动专用头文件
   4          #include <Led.h>//Led底层驱动专用头文件
   5          #include <Key.h>//按键底层驱动专用头文件
   6          #include <Seg.h>//数码管底层驱动专用头文件
   7          #include <Uart.h>//串口底层驱动专用头文件
   8          
   9          /* 变量声明区 */
  10          unsigned char Key_Val,Key_Down,Key_Old,Key_Up;//按键专用变量
  11          unsigned char Key_Slow_Down;//按键减速专用变量
  12          unsigned char Seg_Buf[8] = {10,10,10,10,10,10,10,10};//数码管显示数据存放数组
  13          unsigned char Seg_Point[8] = {0,0,0,0,0,0,0,0};//数码管小数点数据存放数组
  14          unsigned char Seg_Pos;//数码管扫描专用变量
  15          unsigned int Seg_Slow_Down;//数码管减速专用变量
  16          unsigned char ucLed[8] = {0,0,0,0,0,0,0,0};//Led显示数据存放数组
  17          unsigned char Uart_Slow_Down;//串口减速专用变量
  18          unsigned char Uart_Recv[10];//串口接收数据储存数组 默认10个字节 若接收数据较长 可更改最大字节数
  19          unsigned char Uart_Recv_Index;//串口接收数组指针
  20          unsigned char Uart_Send[10];//串口接收数据储存数组 默认10个字节 若发送数据较长 可更改最大字节数
  21          
  22          /* 键盘处理函数 */
  23          void Key_Proc()
  24          {
  25   1        if(Key_Slow_Down) return;
  26   1        Key_Slow_Down = 1;//键盘减速程序
  27   1      
  28   1        Key_Val = Key_Read();//实时读取键码值
  29   1        Key_Down = Key_Val & (Key_Old ^ Key_Val);//捕捉按键下降沿
  30   1        Key_Up = ~Key_Val & (Key_Old ^ Key_Val);//捕捉按键上降沿
  31   1        Key_Old = Key_Val;//辅助扫描变量
  32   1      
  33   1      }
  34          
  35          /* 信息处理函数 */
  36          void Seg_Proc()
  37          {
  38   1        if(Seg_Slow_Down) return;
  39   1        Seg_Slow_Down = 1;//数码管减速程序
  40   1      
  41   1      }
  42          
  43          /* 其他显示函数 */
  44          void Led_Proc()
  45          {
  46   1        
  47   1      }
  48          
  49          /* 串口处理函数 */
  50          void Uart_Proc()
  51          {
  52   1        if(Uart_Slow_Down) return;
  53   1        Uart_Slow_Down = 1;//串口减速程序 
  54   1        
C51 COMPILER V9.54   MAIN                                                                  02/28/2023 13:43:38 PAGE 2   

  55   1      }
  56          
  57          /* 定时器0中断初始化函数 */
  58          void Timer0Init(void)   //1毫秒@12.000MHz
  59          {
  60   1        AUXR &= 0x7F;   //定时器时钟12T模式
  61   1        TMOD &= 0xF0;   //设置定时器模式
  62   1        TL0 = 0x18;   //设置定时初始值
  63   1        TH0 = 0xFC;   //设置定时初始值
  64   1        TF0 = 0;    //清除TF0标志
  65   1        TR0 = 1;    //定时器0开始计时
  66   1        ET0 = 1;    //定时器中断0打开
  67   1        EA = 1;     //总中断打开
  68   1      }
  69          
  70          /* 定时器0中断服务函数 */
  71          void Timer0Server() interrupt 1
  72          {  
  73   1        if(++Key_Slow_Down == 10) Key_Slow_Down = 0;//键盘减速专用
  74   1        if(++Seg_Slow_Down == 500) Seg_Slow_Down = 0;//数码管减速专用
  75   1        if(++Uart_Slow_Down == 200) Uart_Slow_Down = 0;//串口减速专用
  76   1        if(++Seg_Pos == 8) Seg_Pos = 0;//数码管显示专用
  77   1        Seg_Disp(Seg_Pos,Seg_Buf[Seg_Pos],Seg_Point[Seg_Pos]);
  78   1        Led_Disp(Seg_Pos,ucLed[Seg_Pos]);
  79   1      }
  80          
  81          /* 串口1中断服务函数 */
  82          void Uart1Server() interrupt 4
  83          {
  84   1        if(RI == 1) //串口接收数据
  85   1        {
  86   2          Uart_Recv[Uart_Recv_Index] = SBUF;
  87   2          Uart_Recv_Index++;
  88   2          RI = 0;
  89   2        }
  90   1      }
  91          
  92          /* Main */
  93          void main()
  94          {
  95   1        System_Init();
  96   1        Timer0Init();
  97   1        UartInit();
  98   1        while (1)
  99   1        {
 100   2          Key_Proc();
 101   2          Seg_Proc();
 102   2          Led_Proc();
 103   2          Uart_Proc();
 104   2        }
 105   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    273    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     54    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.

C51 COMPILER V9.54   MAIN                                                                  02/28/2023 13:43:38 PAGE 3   


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
