C51 COMPILER V9.59.0.0   MAIN                                                              03/02/2024 11:40:38 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Driver) DEBUG OBJECTEXTEND PRI
                    -NT(.\Listings\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "main.h"
   2          /* LED显示 */
   3          uchar ucLed[8] = {0, 0, 0, 0, 0, 0, 0, 0};
   4          
   5          /* 数码管显示 */
   6          uchar Seg_Slow_Down;                                // 数码管减速
   7          uchar Seg_Buf[8] = {5, 10, 10, 10, 10, 10, 10, 10}; // 数码管显示的值
   8          uchar Seg_Pos;                                      // 数码管指示
   9          uchar Seg_Point[8] = {0, 0, 0, 0, 0, 0, 0, 0};      // 某位是否显示小数点
  10          
  11          /* 界面显示 */
  12          uchar Seg_show_mode; // 0 测距 1 参数 2 记录
  13          uchar Control_mode;  // 0 按键 1 旋钮
  14          /* 键盘方面 */
  15          uchar Key_Slow_Down;
  16          /* 数据 */
  17          uchar Distance_value; // 距离测量数据
  18          uchar Para_max = 60;  // 参数上限
  19          uchar Para_min = 10;  // 参数下限
  20          uchar Wring_count;    // 报警次数
  21          bit Wring_flag;       // 报警标志
  22          uchar Para_mode;      // 0 不控制 1 上限 2 下限
  23          uchar Vol_level;      // 电压等级，用于控制上下限 1 2 3 4
  24          bit Led_show_flag;    // LED闪烁
  25          /* 时间 */
  26          uchar time_100ms;
  27          /* 键盘处理函数 */
  28          void Key_Proc()
  29          {
  30   1          static uchar Key_Val, Key_Down, Key_Up, Key_Old;
  31   1          if (Key_Slow_Down)
  32   1              return;
  33   1          Key_Slow_Down = 1;
  34   1      
  35   1          Key_Val = Key_Read();
  36   1          Key_Down = Key_Val & (Key_Old ^ Key_Val);
  37   1          Key_Up = ~Key_Val & (Key_Old ^ Key_Val);
  38   1          Key_Old = Key_Val;
  39   1          if (Key_Down == 4)
  40   1              Seg_show_mode = (++Seg_show_mode) % 3;
  41   1      
  42   1          if (Key_Down == 5)
  43   1          {
  44   2              if (Seg_show_mode == 1)
  45   2                  Control_mode = (++Control_mode) % 2;
  46   2              if (Seg_show_mode == 2)
  47   2                  Wring_count = 0;
  48   2              Para_mode = 0; // 这里切换的时候将旋钮调整的上下限模式重置，防止出现bug
  49   2          }
  50   1          if (Seg_show_mode == 1)
  51   1          { // 按键控制模式
  52   2              if (Control_mode == 0)
  53   2              {
  54   3                  if (Key_Down == 9)
C51 COMPILER V9.59.0.0   MAIN                                                              03/02/2024 11:40:38 PAGE 2   

  55   3                      Para_max = (Para_max + 10 > 90) ? 50
  56   3                                                      : Para_max + 10;
  57   3                  if (Key_Down == 8)
  58   3                      Para_min = (Para_min + 10 > 40) ? 0
  59   3                                                      : Para_min + 10;
  60   3              }
  61   2              // 旋钮控制模式
  62   2              else
  63   2              {
  64   3                  if (Key_Down == 9)
  65   3                      Para_mode = 1;
  66   3                  if (Key_Down == 8)
  67   3                      Para_mode = 2;
  68   3              }
  69   2          }
  70   1      }
  71          /* 数码管处理函数 */
  72          void Seg_Proc()
  73          {
  74   1          uchar i;
  75   1          if (Seg_Slow_Down)
  76   1              return;
  77   1          Seg_Slow_Down = 1;
  78   1          Distance_value = Ut_Wave_Data();
  79   1          // 超出上下限
  80   1          if ((Distance_value < Para_min || Distance_value > Para_max))
  81   1          {
  82   2              // 没有报警的时候
  83   2              if (Wring_flag == 0)
  84   2              {
  85   3                  Wring_count++;
  86   3                  Wring_flag = 1;
  87   3              }
  88   2          }
  89   1          // 没有超出上下限，拉低报警flag，准备下一次报警
  90   1          else
  91   1          {
  92   2              Wring_flag = 0;
  93   2          }
  94   1          // 当我们处于旋钮控制才进行采集电压
  95   1          if (Control_mode == 1)
  96   1          {
  97   2              Vol_level = Ad_Read(0x03) / 51;
  98   2              Vol_level = (Vol_level >= 4) ? 4 : Vol_level; // 限制一下，防止出现判定5的极端情况
  99   2              if (Para_mode == 1)
 100   2                  Para_max = Vol_level * 10 +50;
 101   2              else if (Para_mode == 2)
 102   2                  Para_min = Vol_level * 10;
 103   2          }
 104   1          switch (Seg_show_mode)
 105   1          {
 106   2          case 0:
 107   2              /* 测距界面 */
 108   2              Seg_Buf[0] = 11; // A
 109   2              for (i = 1; i < 5; i++)
 110   2              {
 111   3                  Seg_Buf[i] = 10;
 112   3              }
 113   2              Seg_Buf[5] = (Distance_value / 100 % 10 == 0) ? 10
 114   2                                                            : Distance_value / 100 % 10;
 115   2              Seg_Buf[6] = ((Distance_value / 10 % 10 == 0) && (Seg_Buf[5] == 0)) ? 10
 116   2                                                                                  : Distance_value / 10 % 10;
C51 COMPILER V9.59.0.0   MAIN                                                              03/02/2024 11:40:38 PAGE 3   

 117   2              Seg_Buf[7] = Distance_value % 10;
 118   2              break;
 119   2      
 120   2          case 1:
 121   2              /* 参数界面 */
 122   2              Seg_Buf[0] = 12; // P
 123   2              Seg_Buf[1] = Control_mode + 1;
 124   2              Seg_Buf[2] = 10;
 125   2              Seg_Buf[3] = Para_min / 10 % 10;
 126   2              Seg_Buf[4] = Para_min % 10;
 127   2              Seg_Buf[5] = 13; //-
 128   2              Seg_Buf[6] = Para_max / 10 % 10;
 129   2              Seg_Buf[7] = Para_max % 10;
 130   2              break;
 131   2      
 132   2          case 2:
 133   2              /* 记录界面 */
 134   2              Seg_Buf[0] = 14; // E
 135   2              for (i = 1; i < 7; i++)
 136   2              {
 137   3                  Seg_Buf[i] = 10;
 138   3              }
 139   2              Seg_Buf[7] = (Wring_count > 9) ? 13
 140   2                                             : Wring_count;
 141   2              break;
 142   2          }
 143   1      }
 144          
 145          /* LED处理函数 */
 146          void Led_Proc()
 147          {
 148   1          ucLed[0] = (Seg_show_mode == 0);
 149   1          ucLed[1] = (Seg_show_mode == 1);
 150   1          ucLed[2] = (Seg_show_mode == 2);
 151   1          ucLed[7] = (Wring_flag == 0) ? 1
 152   1                                       : Led_show_flag;
 153   1      }
 154          
 155          /* 定时器0中断初始化 */
 156          void Timer0_Init(void) // 1毫秒@12.000MHz
 157          {
 158   1          AUXR &= 0x7F; // 定时器时钟12T模式
 159   1          TMOD &= 0xF0; // 设置定时器模式
 160   1          TL0 = 0x18;   // 设置定时初始值
 161   1          TH0 = 0xFC;   // 设置定时初始值
 162   1          TF0 = 0;      // 清除TF0标志
 163   1          TR0 = 1;      // 定时器0开始计时
 164   1          ET0 = 1;
 165   1          EA = 1;
 166   1      }
 167          
 168          /* 定时器0中断函数 */
 169          void Timer0_ISR(void) interrupt 1
 170          {
 171   1          if (++Key_Slow_Down == 10)
 172   1              Key_Slow_Down = 0;
 173   1          if (++Seg_Slow_Down == 500)
 174   1              Seg_Slow_Down = 0;
 175   1          if (++Seg_Pos == 8)
 176   1              Seg_Pos = 0;
 177   1          if (Wring_flag)
 178   1          {
C51 COMPILER V9.59.0.0   MAIN                                                              03/02/2024 11:40:38 PAGE 4   

 179   2              if (++time_100ms == 100)
 180   2              {
 181   3                  time_100ms = 0;
 182   3                  Led_show_flag ^= 1;
 183   3              }
 184   2          }
 185   1          else
 186   1          {
 187   2              time_100ms = 0;
 188   2          }
 189   1          Seg_Disp(Seg_Pos, Seg_Buf[Seg_Pos], Seg_Point[Seg_Pos]);
 190   1          Led_Disp(Seg_Pos, ucLed[Seg_Pos]);
 191   1      }
 192          
 193          void main()
 194          {
 195   1          System_Init();
 196   1          Timer0_Init();
 197   1          while (1)
 198   1          {
 199   2              Key_Proc();
 200   2              Seg_Proc();
 201   2              Led_Proc();
 202   2          }
 203   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    742    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     40       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
