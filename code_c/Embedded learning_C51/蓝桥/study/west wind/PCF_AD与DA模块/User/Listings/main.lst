C51 COMPILER V9.59.0.0   MAIN                                                              03/12/2024 10:36:09 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Driver) DEBUG OBJECTEXTEND PRI
                    -NT(.\Listings\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "main.h"
   2          /* LED显示 */
   3          uchar ucLed[8] = {0, 0, 0, 0, 0, 0, 0, 0};
   4          
   5          /* 数码管显示 */
   6          uchar Seg_Slow_Down;                                // 数码管减速
   7          uchar Seg_Buf[8] = {5, 10, 10, 10, 10, 10, 10, 10}; // 数码管显示的值
   8          uchar Seg_Pos;                                      // 数码管指示
   9          uchar Seg_Point[8] = {0, 0, 0, 0, 0, 0, 0, 0};      // 某位是否显示小数点
  10          
  11          /* 键盘方面 */
  12          uchar Key_Slow_Down;
  13          
  14          /* 数据 */
  15          uchar external_input;     // 外部输入
  16          uchar light_input;        // 光敏电阻输入
  17          uchar differential_input; // 差分电路输入
  18          uchar Rb2_input;          // Rb2滑动变阻器输入
  19          /* 键盘处理函数 */
  20          void Key_Proc()
  21          {
  22   1          static uchar Key_Val, Key_Down, Key_Up, Key_Old;
  23   1          if (Key_Slow_Down)
  24   1              return;
  25   1          Key_Slow_Down = 1;
  26   1      
  27   1          Key_Val = Key_Read();
  28   1          Key_Down = Key_Val & (Key_Old ^ Key_Val);
  29   1          Key_Up = ~Key_Val & (Key_Old ^ Key_Val);
  30   1          Key_Old = Key_Val;
  31   1      }
  32          /* 数码管处理函数 */
  33          void Seg_Proc()
  34          {
  35   1          if (Seg_Slow_Down)
  36   1              return;
  37   1          Seg_Slow_Down = 1;
  38   1          /* 这里因为数码管显示不了全部，所以就显示最常用的两个*/
  39   1          // external_input = Ad_Read(0x40);
  40   1          light_input = Ad_Read(0x41);
  41   1          // differential_input = Ad_Read(0x42);
  42   1          Rb2_input = Ad_Read(0x43);
  43   1          Seg_Buf[0] = light_input / 100 % 10;
  44   1          Seg_Buf[1] = light_input / 10 % 10;
  45   1          Seg_Buf[2] = light_input % 10;
  46   1          Seg_Buf[5] = Rb2_input / 100 % 10;
  47   1          Seg_Buf[6] = Rb2_input / 10 % 10;
  48   1          Seg_Buf[7] = Rb2_input % 10;
  49   1      }
  50          
  51          /* LED处理函数 */
  52          void Led_Proc()
  53          {
  54   1          Da_Write(Rb2_input); // 这里让DA的输出电压和Rb2一致
C51 COMPILER V9.59.0.0   MAIN                                                              03/12/2024 10:36:09 PAGE 2   

  55   1      }
  56          
  57          /* 定时器0中断初始化 */
  58          void Timer0_Init(void) // 1毫秒@12.000MHz
  59          {
  60   1          AUXR &= 0x7F; // 定时器时钟12T模式
  61   1          TMOD &= 0xF0; // 设置定时器模式
  62   1          TL0 = 0x18;   // 设置定时初始值
  63   1          TH0 = 0xFC;   // 设置定时初始值
  64   1          TF0 = 0;      // 清除TF0标志
  65   1          TR0 = 1;      // 定时器0开始计时
  66   1          ET0 = 1;
  67   1          EA = 1;
  68   1      }
  69          
  70          /* 定时器0中断函数 */
  71          void Timer0_ISR(void) interrupt 1
  72          {
  73   1          if (++Key_Slow_Down == 10)
  74   1              Key_Slow_Down = 0;
  75   1          if (++Seg_Slow_Down == 500)
  76   1              Seg_Slow_Down = 0;
  77   1          if (++Seg_Pos == 8)
  78   1              Seg_Pos = 0;
  79   1          Seg_Disp(Seg_Pos, Seg_Buf[Seg_Pos], Seg_Point[Seg_Pos]);
  80   1          Led_Disp(Seg_Pos, ucLed[Seg_Pos]);
  81   1      }
  82          
  83          void main()
  84          {
  85   1          System_Init();
  86   1          Timer0_Init();
  87   1          while (1)
  88   1          {
  89   2              Key_Proc();
  90   2              Seg_Proc();
  91   2              Led_Proc();
  92   2          }
  93   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    288    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     35    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
