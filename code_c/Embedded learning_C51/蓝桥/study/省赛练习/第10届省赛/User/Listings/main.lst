C51 COMPILER V9.60.7.0   MAIN                                                              04/07/2024 22:21:02 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: E:\Applications\Keil_5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Driver) DEBUG OBJE
                    -CTEXTEND PRINT(.\Listings\main.lst) OBJECT(.\Objects\main.obj)

line level    source

   1          /* 头文件声明区 */
   2          #include <STC15F2K60S2.H>//单片机寄存器专用头文件
   3          #include <Init.h>//初始化底层驱动专用头文件
   4          #include <Led.h>//Led底层驱动专用头文件
   5          #include <Key.h>//按键底层驱动专用头文件
   6          #include <Seg.h>//数码管底层驱动专用头文件
   7          #include <stdio.h>//标准库底层驱动专用头文件
   8          #include "iic.h"//数模转换底层驱动专用头文件
   9          
  10          /* 变量声明区 */
  11          unsigned char Key_Val,Key_Down,Key_Old,Key_Up;//按键专用变量
  12          unsigned char Key_Slow_Down;//按键减速专用变量
  13          unsigned char Seg_Buf[8] = {10,10,10,10,10,10,10,10};//数码管显示数据存放数组
  14          unsigned char Seg_Point[8] = {0,0,0,0,0,0,0,0};//数码管小数点数据存放数组
  15          unsigned char Seg_Pos;//数码管扫描专用变量
  16          unsigned int Seg_Slow_Down;//数码管减速专用变量
  17          unsigned char ucLed[8] = {0,0,0,0,0,0,0,0};//Led显示数据存放数组
  18          unsigned char Seg_Disp_Mode;//0-频率显示界面，1-电压显示界面
  19          unsigned int fre;//频率变量
  20          float Vol;//电压变量
  21          bit Vol_Output_Mode;//0-电位器输出模式，1-固定输出模式
  22          float Vol_Output;//真实电压输出
  23          bit Led_Enable_Flag = 1;//Led使能标志位 默认开启
  24          bit Seg_Enable_Flag = 1;//数码管
  25          unsigned int  Timer_1000Ms;
  26          /* 键盘处理函数 */
  27          void Key_Proc()
  28          {
  29   1              if(Key_Slow_Down) return;
  30   1              Key_Slow_Down = 1;//键盘减速程序
  31   1      
  32   1              Key_Val = Key_Read();//实时读取键码值
  33   1              Key_Down = Key_Val & (Key_Old ^ Key_Val);//捕捉按键下降沿
  34   1              Key_Up = ~Key_Val & (Key_Old ^ Key_Val);//捕捉按键上降沿
  35   1              Key_Old = Key_Val;//辅助扫描变量
  36   1              switch(Key_Down)
  37   1              {
  38   2                      case 4:
  39   2                              Seg_Disp_Mode ^=1;
  40   2                      break;
  41   2                      case 5:
  42   2                              Vol_Output_Mode ^=1;
  43   2                      break;
  44   2                      case 6:
  45   2                              Led_Enable_Flag ^=1;
  46   2                      break;
  47   2                      case 7://数码管显示功能控制
  48   2                              Seg_Enable_Flag ^= 1;
  49   2                      break;
  50   2                              
  51   2                      
  52   2              }
  53   1      }
  54          
C51 COMPILER V9.60.7.0   MAIN                                                              04/07/2024 22:21:02 PAGE 2   

  55          /* 信息处理函数 */
  56          void Seg_Proc()
  57          {       
  58   1              unsigned char i=2;
  59   1              if(Seg_Slow_Down) return;
  60   1              Seg_Slow_Down = 1;//数码管减速程序
  61   1              Vol = Ad_Read(0x03) / 51.0;//实时获取电位器电压值
  62   1              if(Vol_Output_Mode==0)
  63   1                      Vol_Output=2;
  64   1              else
  65   1                      Vol_Output=Vol;
  66   1              if(Seg_Disp_Mode==0){//处于频率显示
  67   2              Seg_Point[5]=0;
  68   2              Seg_Buf[0]=11;//F
  69   2              Seg_Buf[2]=fre/100000%10;
  70   2              Seg_Buf[3]=fre/10000%10;
  71   2              Seg_Buf[4]=fre/1000%10;
  72   2              Seg_Buf[5]=fre/100%10;
  73   2              Seg_Buf[6]=fre/10%10;
  74   2              Seg_Buf[7]=fre%10;
  75   2                      
  76   2              while(Seg_Buf[i]==0)
  77   2              {
  78   3                      Seg_Buf[i]=10;
  79   3                      if(++i==7)break;
  80   3              }
  81   2              }
  82   1              else//处于电压显示
  83   1              {
  84   2                      Seg_Buf[0]=12;//U
  85   2                      Seg_Buf[4]=Seg_Buf[3]=10;
  86   2                      Seg_Buf[5]=(unsigned char)Vol_Output;
  87   2                      Seg_Buf[6]=(unsigned int)(Vol_Output * 100)/10%10;
  88   2                      Seg_Buf[7]=(unsigned int)(Vol_Output * 100)%10;
  89   2                      Seg_Point[5]=1;
  90   2              }
  91   1      }
  92          
  93          /* 其他显示函数 */
  94          void Led_Proc()
  95          {       unsigned char i;
  96   1              /*DAC相关*/
  97   1              Da_Write(Vol_Output*51);//实时输出电压值
  98   1              for(i=0;i<2;i++)
  99   1              {
 100   2                      ucLed[i]=(i=Seg_Disp_Mode);
 101   2                      ucLed[2] = ((Vol >= 1.5 && Vol< 2.5) || (Vol >= 3.5));
 102   2                      ucLed[3] = ((fre >= 1000 && fre< 5000) || (fre >= 10000));
 103   2                      ucLed[4] = Vol_Output_Mode;
 104   2              }
 105   1      }
 106          
 107          
 108          /* 计数器0中断初始化函数 */
 109          
 110          void Timer0_Init(void)          //1毫秒@12.000MHz
 111          {
 112   1              AUXR &= 0x7F;                   //定时器时钟12T模式
 113   1              TMOD &= 0xF0;                   //设置定时器模式
 114   1              TMOD |= 0x05;                   //设置16位不重载计数模式
 115   1              TL0 = 0;                                //设置定时初始值
 116   1              TH0 = 0;                                //设置定时初始值
C51 COMPILER V9.60.7.0   MAIN                                                              04/07/2024 22:21:02 PAGE 3   

 117   1              TF0 = 0;                                //清除TF0标志
 118   1              TR0 = 1;                                //定时器0开始计时
 119   1      }
 120          /* 定时器1中断初始化函数 */
 121          void Timer1_Init(void)          //1毫秒@12.000MHz
 122          {
 123   1              AUXR &= 0xBF;                   //定时器时钟12T模式
 124   1              TMOD &= 0x0F;                   //设置定时器模式
 125   1              TL1 = 0x18;                             //设置定时初始值
 126   1              TH1 = 0xFC;                             //设置定时初始值
 127   1              TF1 = 0;                                //清除TF1标志
 128   1              TR1 = 1;                                //定时器1开始计时
 129   1              ET1=1;                                  //定时器中断1打开
 130   1              EA=1;                                   //总中断打开            
 131   1      }
 132          
 133          /* 定时器0中断服务函数 */
 134          void Timer1Server() interrupt 3
 135          {  
 136   1              if(++Key_Slow_Down == 10) Key_Slow_Down = 0;//键盘减速专用
 137   1              if(++Seg_Slow_Down == 500) Seg_Slow_Down = 0;//数码管减速专用
 138   1              if(++Seg_Pos == 8) Seg_Pos = 0;//数码管显示专用
 139   1              if(Seg_Enable_Flag == 1) //数码管使能
 140   1                      Seg_Disp(Seg_Pos,Seg_Buf[Seg_Pos],Seg_Point[Seg_Pos]);
 141   1              else
 142   1                      Seg_Disp(Seg_Pos,10,0); //熄灭所有数码管
 143   1              if(Led_Enable_Flag == 1) //Led使能
 144   1                      Led_Disp(Seg_Pos,ucLed[Seg_Pos]);
 145   1              else
 146   1                      Led_Disp(Seg_Pos,0); //熄灭所有Led
 147   1              if(++Timer_1000Ms == 1000) //实时读取频率值
 148   1              {
 149   2                      Timer_1000Ms = 0;
 150   2                      fre = TH0 << 8 | TL0;
 151   2                      TH0 = TL0 = 0;
 152   2              }
 153   1      
 154   1      }
 155          
 156          
 157          
 158          /* Main */
 159          void main()
 160          {
 161   1              System_Init();
 162   1              Timer0_Init();  
 163   1              Timer1_Init();  
 164   1              while (1)
 165   1              {
 166   2                      Key_Proc();
 167   2                      Seg_Proc();
 168   2                      Led_Proc();
 169   2                      
 170   2              }
 171   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    792    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
C51 COMPILER V9.60.7.0   MAIN                                                              04/07/2024 22:21:02 PAGE 4   

   DATA SIZE        =     45       2
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
