C51 COMPILER V9.59.0.0   IIC                                                               02/13/2022 10:35:37 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE IIC
OBJECT MODULE PLACED IN .\Objects\IIC.obj
COMPILER INVOKED BY: D:\Keil\Keil_C51\C51\BIN\C51.EXE IIC.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings
                    -\IIC.lst) TABS(2) OBJECT(.\Objects\IIC.obj)

line level    source

   1          #include "IIC.h"
   2          
   3          sbit SCL = P2^0;
   4          sbit SDA = P2^1;
   5          
   6          void Delay5us()   //@11.0592MHz
   7          {
   8   1        unsigned char i;
   9   1      
  10   1        _nop_();
  11   1        i = 11;
  12   1        while (--i);
  13   1      }
  14          
  15          
  16          void iic_start()
  17          {
  18   1        SDA = 1;
  19   1        SCL = 1;
  20   1        Delay5us();
  21   1        SDA = 0;
  22   1        Delay5us();
  23   1      }
  24          
  25          void iic_stop()
  26          {
  27   1        SDA = 0;
  28   1        SCL = 1;
  29   1        Delay5us();
  30   1        SDA = 1;
  31   1        Delay5us();
  32   1        SCL = 0;
  33   1        Delay5us();
  34   1      }
  35          
  36          void iic_sendack()
  37          {
  38   1        SCL = 0;
  39   1        SDA = 0;
  40   1        Delay5us();
  41   1        SCL = 1;
  42   1        Delay5us();
  43   1      }
  44          
  45          bit iic_waitack()
  46          {
  47   1        bit a;
  48   1        SDA = 1;
  49   1        SCL = 1;
  50   1        Delay5us();
  51   1        a = SDA;
  52   1        SCL = 0;
  53   1        return a;
  54   1      }
C51 COMPILER V9.59.0.0   IIC                                                               02/13/2022 10:35:37 PAGE 2   

  55          
  56          void iic_WriteByte(unsigned char da)
  57          {
  58   1        unsigned char i;
  59   1        for(i=0; i<8; i++)
  60   1        {
  61   2          SCL = 0;
  62   2          SDA = da&0x80;
  63   2          da <<= 1;
  64   2          Delay5us();
  65   2          SCL = 1;
  66   2          Delay5us();
  67   2        }
  68   1        SCL = 0;
  69   1      }
  70          
  71          unsigned char iic_ReadByte()
  72          {
  73   1        unsigned char i, temp;
  74   1        for(i=0; i<8; i++)
  75   1        {
  76   2          SCL = 1;
  77   2          Delay5us();
  78   2          temp <<= 1;
  79   2          temp = temp | SDA;
  80   2          SCL = 0;
  81   2        }
  82   1        return temp;
  83   1      }
  84          
  85          unsigned char PCF()
  86          {
  87   1        unsigned char temp;
  88   1        iic_start();
  89   1        iic_WriteByte(0x90);
  90   1        iic_waitack();
  91   1        iic_WriteByte(0x03);
  92   1        iic_waitack();
  93   1        iic_start();  
  94   1        iic_WriteByte(0x91);
  95   1        iic_waitack();
  96   1        temp = iic_ReadByte();
  97   1        iic_sendack();
  98   1        iic_stop();
  99   1        return temp;
 100   1      }
 101          
 102          void Write_EEPROM(unsigned char da)
 103          {
 104   1        iic_start();
 105   1        iic_WriteByte(0xA0);
 106   1        iic_waitack();
 107   1        iic_WriteByte(0x00);
 108   1        iic_waitack();
 109   1        iic_WriteByte(da);
 110   1        iic_waitack();
 111   1        iic_stop();
 112   1      }
 113          
 114          unsigned char Read_EEPROM()
 115          {
 116   1        unsigned char temp;
C51 COMPILER V9.59.0.0   IIC                                                               02/13/2022 10:35:37 PAGE 3   

 117   1        iic_start();
 118   1        iic_WriteByte(0xA0);
 119   1        iic_waitack();
 120   1        iic_WriteByte(0x00);
 121   1        iic_waitack();
 122   1        iic_start();  
 123   1        iic_WriteByte(0xA1);
 124   1        iic_waitack();
 125   1        temp = iic_ReadByte();
 126   1        iic_sendack();
 127   1        iic_stop();
 128   1        return temp;
 129   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    240    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
